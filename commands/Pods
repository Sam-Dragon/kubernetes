## PODS

> Create
kubectl run hello-world --image=hello-world 

> Create with namespace
kubectl run hello-world --image=hello-world -n ckad

> Create with file
kubectl create -f hello-world.yaml (OR) kubectl apply -f hello-world.yaml

> Create with Other options
kubectl run nginx --image=nginx -n ckad-namespace --expose=false 
kubectl run nginx --image=nginx -n ckad-namespace --serviceaccount='' 
kubectl run nginx --image=nginx -n ckad-namespace --annotations=[] 

> Edit
kubectl edit pods hello-deployment-6896f5bbfb-m74zx 

> Edit with namespace
kubectl edit pods hello-deployment-6896f5bbfb-m74zx -n ckad

> Edit with file
kubectl edit -f hello-world.yaml -n ckad

> Edit Pod Image
kubectl set image pod/<POD_NAME> <CONTAINER>=<IMAGE> -n ckad

> GET
kubectl get pods [Or pod Or po]

> Get all namespace
kubectl get pods -A (OR) kubectl get pods --all-namespaces

> Get specific namespace
kubectl get pods -n ckad-namespace

> Get anything with key
kubectl get pods -n ckad-namespace | grep <KEY TO SEARCH>

> DELETE  
kubectl delete pods hello-deployment-6896f5bbfb-4sf84

> Delete with namespace
kubectl delete pods hello-deployment-6896f5bbfb-4sf84 -n ckad-namespace

> Delete with namespace & force option
kubectl delete pods hello-deployment-6896f5bbfb-4sf84 -n ckad-namespace --force --grace-period=0

> Delete with namespace & selector
kubectl delete pods hello-deployment-6896f5bbfb-4sf84 -n ckad-namespace --selector='app-demo' (OR) kubectl delete pods hello-deployment-6896f5bbfb-4sf84 -n ckad-namespace -l app=demo

* > Delete pod faster
kubectl delete pods hello-deployment-6896f5bbfb-4sf84 --force

> Delete all pods
kubectl delete pods --all

# Yaml
kubectl -n ckad run hello-world --image=hello-world --dry-run=client -o yaml > hello-world.yaml
kubectl delete -f hello-world.yaml
kubectl replace --force hello-world.yaml

> DESCRIBE / EXEC / LOGS / WIDE [**SPECIAL**]
kubectl describe pods hello-deployment-6896f5bbfb-m74zx -n ckad-namespace
kubectl get pods -n ckad-namespace -o wide 

> LOGS 
- basic logs
kubectl logs hello-deployment-6896f5bbfb-m74zx -n ckad-namespace

- specific container
kubectl logs hello-deployment-6896f5bbfb-m74zx -c CONTAINER -n ckad-namespace

- Live Streaming
kubectl logs -f hello-deployment-6896f5bbfb-m74zx -n ckad-namespace 

** > Exec
kubectl exec -it hello-deployment-6896f5bbfb-m74zx -n ckad-namespace sh [Or  bash] -- Or cqlsh [Cassandra]
kubectl exec -it hello-deployment-6896f5bbfb-m74zx -n ckad -- cat /app/app.log

> WATCH
kubectl get pods -w

> VERBOSE
kubectl get po -n ckad-namespace -v=8

> EXPORT
kubectl run hello-world --image=hello-world -n ckad-namespace --dry-run=client -o yaml > hello-world.yaml

> CREATE WITH OPTIONS [PORT, ENV]
kubectl run nginx --image=nginx -n ckad-namespace --port=5701 --env="APP_VERSION=1.0" 
kubectl get pod --selector='app=demo' -n ckad-namespace (OR) kubectl get pod -l app=ckad2 -n ckad-namespace

> DRY RUN [TO Prevent component creation]
kubectl run hello-world --image=hello-world -n ckad-namespace --dry-run=client

> Pod Service Account
kubectl get pods --all-namespaces -o jsonpath='{range .items[?(@.spec.serviceAccountName == "dashboard-sa")]}{.metadata.namespace} {.metadata.name}{"\n"}{end}'

> Check pod based on user
kubectl get pods <POD> --as dev-user


> Edit Deployment Image
kubectl set image deploy/<DEPLOYMENT_NAME> <CONTAINER>=<IMAGE> -n ckad

> Print Environment variables
 kubectl exec -it nginx -- printenv

> Find container names in multi-container pod
kubectl logs <POD>
-- This will give warning with container names
