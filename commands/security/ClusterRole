# RBAC [Role Based Access Control]
clusterrole - Always associated with cluster

# Create
kubectl create clusterrole delete-clusterrole -n ckad --verb=get,list,watch --resource=secret

> Create for specific pod
kubectl create clusterrole pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod

> Create with Aggregation Rule
kubectl create clusterrole monitoring --aggregation-rule="rbac.example.com/aggregate-to-monitoring=true"

> Create with file
> clusterrole.yml
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: "2023-11-22T16:27:19Z"
  name: ckad-clusterrole
  namespace: ckad
  resourceVersion: "2961559"
  uid: d22ba23d-d845-453a-9cdf-6cc105fa03d3
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
---
save and exit
kubectl create -f clusterrole.yml (OR) kubectl apply -f clusterrole.yml

# Edit
kubectl edit clusterrole ckad-clusterrole -n ckad

# Get
kubectl get clusterrole -n ckad

> Get specific clusterroles

> Yaml
kubectl get clusterrole ckad-clusterrole -n ckad -o yaml

> Json 
kubectl get clusterrole ckad-clusterrole -n ckad -o json

> Get all clusterroles
kubectl get clusterrole -n ckad -o yaml

# Delete
kubectl delete clusterrole delete-clusterrole -n ckad

# Describe
kubectl describe clusterrole -n ckad

> Describe specific clusterrole
kubectl describe clusterrole ckad-clusterrole -n ckad

# Export 
> YAML
kubectl create clusterrole create-clusterrole -n ckad --dry-run=client -o yaml > clusterrole-new.yaml
kubectl create -f config.yaml (OR) kubectl apply -f config.yaml

> JSON
kubectl create clusterrole create-json-clusterrole -n ckad --dry-run=client -o json > clusterrole-json.yaml
kubectl create -f config-json.yaml (OR) kubectl apply -f config-json.yaml
