# Security Context
It is defined for a pod, they cannot stand independently

-- POD LEVEL --
---
spec:
  securityContext:
      runAsUser: 1000
      runAsGroup: 3000
      fsGroup: 2000
---

-- CONTAINER LEVEL --
---
spec
  securityContext:
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
        allowPrivilegeEscalation: false
  containers:
    - name: sec-ctx-demo
      image: busybox:1.28
      command: [ "sh", "-c", "sleep 1h" ]
      volumeMounts:
      - name: sec-ctx-vol
        mountPath: /data/demo
---

> capabilities are added only to container not to pod
---
spec:
  containers:
    - name: sec-ctx-demo
      image: busybox:1.28
      command: [ "sh", "-c", "sleep 1h" ]
      volumeMounts:
      - name: sec-ctx-vol
        mountPath: /data/demo
      securityContext:
        capabilities:
            add: ['MAC_ADMIN']
---

# Additional configuration for container / pod

# SECCOMP PROFILE
---
securityContext:
  seccompProfile:
    type: RuntimeDefault
---

# LOCALHOST PROFILE
---
securityContext:
  seccompProfile:
    type: Localhost
    localhostProfile: my-profiles/profile-allow.json
---

# SE LINUX OPTIONS
---
securityContext:
  seLinuxOptions:
    level: "s0:c123,c456"
---

# Find the user of pod from outside
kubectl exec pod <POD> --whoami

# Find the user of pod from outside
kubectl exec pod <POD> sh
ps aux

# Set volume permissions & ownew ship policy for pod
fsGroupChangePolicy - OnRootMismatch (OR) Always

Note: container user overrides pod user permission
