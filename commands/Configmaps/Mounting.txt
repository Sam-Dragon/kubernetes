## Read configmaps as file reading all environment variables

kubectl run file-cm-po --image=nginx -n ckad

kubectl get po file-cm-po -n ckad -o yaml > file-cm-po.yaml
kubectl delete po file-cm-po -n ckad

vi file-cm-po.yaml
...
spec:
  containers:
  envFrom:
  - configMapRef:
      name: file-cm
...
kubectl apply -f file-cm-po.yaml

## Read configmaps for specific environment variable & display in command

kubectl run env-cm-po --image=nginx -n ckad

kubectl get po env-cm-po -n ckad -o yaml > env-cm-po.yaml
kubectl delete po env-cm-po -n ckad

vi env-cm-po.yaml
...
spec:
  containers:
  command: ["/bin/sh", "-c", "echo $(color)"] # Read configmap env variable
  env:
  - name: COLOR_KEY
    valueFrom:
      configMapKeyRef:
        key: color
        name: env-cm
  - name: NAME_KEY
    valueFrom:
      configMapKeyRef:
        key: name
        name: env-cm
        optional: true # mark the variable as optional
...
kubectl apply -f env-cm-po.yaml

## Read configmaps as volumes / files
- use it when configmap size is beyond 1MiB

kubectl run volume-cm-po --image=nginx -n ckad

kubectl get po volume-cm-po -n ckad -o yaml > volume-cm-po.yaml
kubectl delete po volume-cm-po -n ckad

vi volume-cm-po.yaml
...
spec:
  containers:
    ...
    volumeMounts:
    - mountPath: /home
      name: mount-configmaps-volume
      readOnly: true # Property to set read access
volumes:
- configMap:
    defaultMode: 420
    name: file-as-key-cm
  name: mount-configmaps-volume
...
kubectl apply -f volume-cm-po.yaml
