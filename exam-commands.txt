# Ckad exam related

# Find all resources one show
kubectl get po,svc,deploy
kubectl get all

## Namespace
kubectl create ns my-ns 

## Node 
> Make node schedulable or unschedulable
kubectl get no -o wide

> Schedule OR Unschedule Node
kubectl cordon control-plane
kubectl uncordon control-plane

> Taint & Untaint
kubectl taint no control-plane app=run:NoSchedule
kubectl taint no control-plane app-

## Configmap
kubectl create cm literal-config --from-literal="DB_HOST=host.com" --from-literal="DB_PORT=8080"
kubectl create cm file-config --from-file=/configmap.yaml
kubectl create cm env-config --from-env-file=/configmap.env

## Secret
kubectl create secret generic literal-secret --from-literal="DB_NAME=admin" --from-literal="DB_PASS=admin123"
kubectl create secret generic file-secret --from-file=/secret.yaml
kubectl create secret generic env-secret --from-env-file=/secret.env

> Create Secret for Docker
kubectl create secret docker-registry regcred --docker-server=<DOCKER_URL> --docker-username=<DOCKER_USERNAME> --docker-password=<DOCKER_PASSWORD> --docker-email=<DOCKER_EMAIL>
kubectl create secret docker-registry my-secret --from-file=.dockerconfigjson=path/to/.docker/config.json

> Create Secret for TLS
kubectl create secret tls my-tls-secret --cert=path/to/cert/file --key=path/to/key/file

## Service Accounts
kubectl create sa service-account-1
kubectl create token service-account-1

## Services
kubectl create service clusterip my-cs --tcp=5678:8080
kubectl create service loadbalancer my-lbs --tcp=5678:8080
kubectl create service externalname my-ns --external-name bar.com
kubectl create service nodeport my-ns --tcp=5678:8080
kubectl create service clusterip my-cs --clusterip="None"

> Create services for already created deploy
kubectl expose deploy nginx --name=nginx-svc --port=6379 --target-port=6666 --type=ClusterIP 
kubectl expose po nginx --name=nginx-service --port=8000 --nodePort=8888 --type=NodePort

## Rolling updates & Rollouts
> Status, History & Undo
kubectl rollout status deploy nginx
kubectl rollout history deploy nginx
kubectl rollout undo deploy nginx

> Search / Undo to specific version
kubectl rollout history deploy nginx --to-revision=1
kubectl rollout undo deploy nginx --to-revision=2

> Pause, Resume & Restart
kubectl rollout pause deploy nginx
kubectl rollout resume deploy nginx
kubectl rollout restart deploy nginx

## Replicasets
kubectl scale rs cassandra-replicas --replicas=2

## Deployments
> create deployment with replicas & port in namespace = ckad & command date
kubectl create deploy nginx --image=nginx --replicas=3 --port=5678 -n ckad -- date

> Scaling & Auto-scaling deployment
kubectl scale deploy nginx --replicas=2
kubectl autoscale deploy nginx --min=2 --max=10 --cpu-percent=80
kubectl scale --current-replicas=2 --replicas=3 deployment/mysql # Filter & Scale

> To set & remove resources 
kubectl set resources deploy nginx --requests="cpu=1,memory=100Mi" --limits="cpu=2,memory=1G" 
kubectl set resources  deploy nginx --requests="cpu=0,memory=0" --limits="cpu=0,memory=0"

> To set service account
kubectl set sa deploy nginx service-account-1

# Pods
kubect run nginx --image=nginx --labels=app=run
kubectl run nginx --image=nginx -n ckad-namespace --port=5701 --env="APP_VERSION=1.0" # CREATE POD WITH PORT AND ENV 
kubectl run nginx --image=nginx --expose=false   # CREATE POD WITH SERVICE 
kubectl run nginx --image=nginx --serviceaccount='service-user-account' # CREATE POD WITH SERVICE ACCOUNT
kubectl run nginx --image=nginx -n ckad-namespace --annotations=[nginx=/]  # CREATE POD WITH ANNOTATIONS
kubectl exec -it nginx -- printenv # CREATE POD WITH COMMANDS

> Update image
kubectl set image po nginx nginx-container=nginx:1.17

> Delete
kubectl delete po nginx-pod --grace-period=0 --force

> Replace 
kubectl replace -f pod.yml --force --grace-period=0

> Fetch Ip and Node
kubectl get po -o wide

> View
kubectl get po nginx -o yaml
kubectl get po nginx -o json

## Debug
> Describe
kubectl describe po nginx-pod
kubectl describe po nginx-pod -l app=nginx

> Logs
kubectl logs nginx-pod
kubectl logs nginx-pod --all-containers=true
kubectl logs nginx-pod -p   # Previous logs
kubectl logs nginx-pod --tail=100  # Read 100 lines
kubectl logs nginx-pod --since=1h  # Last 1hr logs

> Exec
kubectl exec it nginx-pod -- bash (OR) kubectl exec it nginx-pod -- sh
kubectl exec -it nginx-pod -c nginx  # Read logs of one of the container
kubectl exec mypod -c ruby-container -- printenv

> Copy [Try more with this]
kubectl cp <some-namespace>/<some-pod>:/tmp/foo /tmp/bar
tar cf - /tmp/foo | kubectl exec -i -n <some-namespace> <some-pod> -- tar xf - -C /tmp/bar

## Resource Quota
> resource quota with all parametes & scopes 
kubectl create quota my-quota --hard=cpu=1,memory=1G,pods=2,services=3,replicationcontrollers=2,resourcequotas=1,secrets=5,persistentvolumeclaims=10 --scopes=BestEffort

## Ingress
kubectl create ingress ingress_test --rule="host.com/context=service:8080,tls=my-cert" --rule="host.com/context=service:8080,tls=file-secret" --annotation nginx.ingress.kubernetes.io/rewrite-target=/  --default-backend=defaultsvc:http

## Jobs
kubectl create job day-job --image=nginx 
kubectl create job my-job --image=busybox -- date

> Create job from cronjob
kubectl create job test-job --from=cronjob/a-cronjob

## Cron Jobs
kubectl create cj day-job --image=nginx --schedule="*/1 * * * *"
kubectl create cronjob my-job --image=busybox --schedule="*/1 * * * *" -- date

## Environment
> To set & Remove env variable for existing pods/deploy
kubectl set env deploy nginx app=nginx
kubectl set env deploy nginx app-

> Import Env from configmap / secret [this will be read as individual keys in deploy/pod]
kubectl set env --from=configmap/literal-config deployment/myapp
kubectl set env --from=secret/literal-secret deployment/myapp

## Labels
> create pods with labels
kubectl run nginx --image=nginx --labels="app=run" --restart=Never # CREATE POD WITH LABEL

> Set, Edit & remove label to existing pod
kubectl label po nginx app=run
kubectl label pod nginx app=ckad-update --overwrite
kubectl label po nginx app-

> Get labels
kubectl get po nginx --show-labels
kubectl get labels nginx --list

## Selector
> Search all pods with label app=ckad
kubectl get pod -l app in (ckad)

> Replace all pods label from app=nginx to tier=fe
kubectl label pods -l app=nginx tier=fe

## Annotations
> Set & Remove Annotations
kubectl annotate po foo description='my frontend'
kubectl annotate po foo description='my pod' --overwrite
kubectl annotate po foo description-

## Debug
> To find out the names of container in multi container pod
kubectl logs <POD NAME>
- warning message will display the names

## Context
kubectl config get-contexts
kubectl config set-context --current --namespace=ckad

## helm
helm install <PACKAGE>
helm uninstall <PACKAGE>
helm upgrade <PACKAGE>
helm rollback <PACKAGE>

> Download chart from existing repo
helm pull --untar bitnami/apache

> Install & UnInstall repo
helm repo add bitnami https://charts.bitnami.com/bitnami
helm uninstall bravo bitnami/drupal 

> List
helm list
helm repo list

> Search
helm search hub <KEYWORD>
helm search repo <KEYWORD>

## Role, ClusterRole, RoleBinding, ClusterRoleBinding
kubectl create role admin --verb=list,get,create --resource=secret
kubectl create role pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod   # Specific pod role

kubectl create rolebinding userrolebinding --user=admin --role=admin
kubectl create rolebinding delete-rolebinding --user=admin --role=admin --group=admin-group

kubectl create clusterrole cluster-admin --verb=list,get,create --resource=secret
kubectl create clusterrole pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod   # Specific pod role
kubectl create clusterrole monitoring --aggregation-rule="rbac.example.com/aggregate-to-monitoring=true"    # With Rule

kubectl create clusterrolebinding userrolebinding --user=admin --clusterrole=admin
kubectl create clusterrolebinding delete-rolebinding --user=admin --clusterrole=admin --group=admin-group

## Port forward
kubectl port-forward deploy nginx 5000 6000
kubectl port-forward deploy nginx 5000:6000 --address localhost
kubectl port-forward pod/mypod :5000

## Proxy
kubectl proxy --port=5000
kubectl proxy --api-prefix=/
kubectl proxy --api-prefix=/k8s-api

## Poddisruptionbudget  
kubectl create pdb my-pdb --selector=app=nginx --min-available=50% --min-unavailable=1
